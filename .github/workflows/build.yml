name: Android Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          zip \
          unzip \
          openjdk-17-jdk \
          python3-pip \
          autoconf \
          automake \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libsqlite3-dev \
          libffi-dev \
          libssl-dev \
          python3-dev \
          build-essential

    - name: Install Buildozer
      run: |
        pip install --upgrade pip
        pip install buildozer
        pip install cython==0.29.19
        pip install kivy

    - name: Pre-accept Android licenses
      run: |
        mkdir -p ~/.android
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > ~/.android/android-sdk-license
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> ~/.android/android-sdk-license
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> ~/.android/android-sdk-license

    - name: Run Buildozer with detailed logging
      run: |
        # Создаем лог-файл вручную чтобы он всегда был
        echo "=== BUILD STARTED AT: $(date) ===" > full_build.log
        
        # Запускаем buildozer с подробным логированием
        set -x  # Включаем отладку
        buildozer -v android debug 2>&1 | tee -a full_build.log
        BUILD_EXIT_CODE=${PIPESTATUS[0]}
        set +x  # Выключаем отладку
        
        echo "=== BUILD FINISHED WITH EXIT CODE: $BUILD_EXIT_CODE ===" >> full_build.log
        echo "BUILD_EXIT_CODE=$BUILD_EXIT_CODE" >> $GITHUB_ENV

    - name: Analyze build results
      run: |
        echo "Build exit code: $BUILD_EXIT_CODE"
        
        if [ -f "full_build.log" ]; then
          echo "=== Last 50 lines of log ==="
          tail -50 full_build.log
          
          echo "=== Error analysis ==="
          grep -i "error\|fail\|exception" full_build.log | head -20 || echo "No errors found"
          
          echo "=== Warning analysis ==="
          grep -i "warn" full_build.log | head -10 || echo "No warnings found"
        else
          echo "No log file found!"
        fi

    - name: Check for APK files
      run: |
        echo "=== Searching for APK files ==="
        find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
        
        echo "=== Checking bin directory ==="
        ls -la bin/ 2>/dev/null || echo "bin directory not found"
        
        echo "=== Checking .buildozer directory ==="
        find .buildozer -name "*.apk" -type f 2>/dev/null || echo "No APK in .buildozer"

    - name: Upload build log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-log
        path: full_build.log

    - name: Create debug info
      if: failure()
      run: |
        mkdir -p artifacts
        echo "Build failed with exit code: $BUILD_EXIT_CODE" > artifacts/debug.txt
        echo "=== Directory structure ===" >> artifacts/debug.txt
        ls -la >> artifacts/debug.txt
        
        if [ -f "full_build.log" ]; then
          echo "=== Last 30 lines of build log ===" >> artifacts/debug.txt
          tail -30 full_build.log >> artifacts/debug.txt
        fi

    - name: Upload debug info
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-info
        path: artifacts/debug.txt

    - name: Upload APK if exists
      if: success()
      run: |
        mkdir -p artifacts
        APK_FILES=$(find . -name "*.apk" -type f 2>/dev/null)
        
        if [ -n "$APK_FILES" ]; then
          echo "Found APK files: $APK_FILES"
          cp $APK_FILES artifacts/
          ls -la artifacts/
        else
          echo "No APK files found"
          exit 1
        fi

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: artifacts/*.apk
