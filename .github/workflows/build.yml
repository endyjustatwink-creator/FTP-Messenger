name: Android Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python with dev headers
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies with Python headers
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          zip \
          unzip \
          openjdk-17-jdk \
          python3-pip \
          autoconf \
          automake \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libsqlite3-dev \
          libffi-dev \
          libssl-dev \
          python3-venv \
          python3-dev \
          build-essential \
          wget \
          python3.9-dev \
          libpython3.9-dev

    - name: Create and activate virtual environment
      run: |
        python3 -m venv venv
        source venv/bin/activate

    - name: Install Buildozer and dependencies
      run: |
        source venv/bin/activate
        pip install --upgrade pip
        pip install wheel
        pip install setuptools==65.5.0
        pip install cython==0.29.19
        pip install buildozer
        pip install kivy==2.3.0

    - name: Verify Python headers
      run: |
        echo "=== Checking Python headers ==="
        python3 -c "import sysconfig; print(sysconfig.get_config_var('INCLUDEPY'))"
        find /usr -name "Python.h" 2>/dev/null | head -5 || echo "Python.h not found"

    - name: Pre-accept Android licenses
      run: |
        mkdir -p ~/.android
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > ~/.android/android-sdk-license
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> ~/.android/android-sdk-license
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> ~/.android/android-sdk-license

    - name: Build APK with fixed environment
      run: |
        source venv/bin/activate
        
        # Экспортируем пути к Python headers
        export C_INCLUDE_PATH=$(python3 -c "import sysconfig; print(sysconfig.get_config_var('INCLUDEPY'))"):$C_INCLUDE_PATH
        export CPLUS_INCLUDE_PATH=$(python3 -c "import sysconfig; print(sysconfig.get_config_var('INCLUDEPY'))"):$CPLUS_INCLUDE_PATH
        
        echo "=== Python include path ==="
        python3 -c "import sysconfig; print(sysconfig.get_config_var('INCLUDEPY'))"
        
        echo "=== Starting build process ==="
        timeout 1800 buildozer -v android debug 2>&1 | tee full_build.log

    - name: Analyze build results
      run: |
        echo "=== Build status ==="
        if [ ${PIPESTATUS[0]} -eq 0 ]; then
          echo "Build completed successfully!"
        else
          echo "Build failed or timed out"
        fi
        
        echo "=== Error analysis ==="
        grep -i "error\|fail\|exception\|Python.h" full_build.log | head -20 || echo "No obvious errors found"
        
        echo "=== APK search ==="
        find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"

    - name: Upload build log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-log
        path: full_build.log

    - name: Upload APK if exists
      if: always()
      run: |
        mkdir -p artifacts
        APK_FILES=$(find . -name "*.apk" -type f 2>/dev/null)
        
        if [ -n "$APK_FILES" ]; then
          echo "Found APK files: $APK_FILES"
          cp $APK_FILES artifacts/
          ls -la artifacts/
        else
          echo "No APK files found"
          # Создаем debug информацию
          echo "Build log analysis:" > artifacts/debug.txt
          tail -50 full_build.log >> artifacts/debug.txt
        fi

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: artifacts/*.apk

    - name: Upload debug info
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-info
        path: artifacts/debug.txt
