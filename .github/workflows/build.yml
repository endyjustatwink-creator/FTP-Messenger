name: Android Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python with dev headers
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies with Python headers
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          zip \
          unzip \
          openjdk-17-jdk \
          python3-pip \
          python3-dev \
          python3.9-dev \
          libpython3.9-dev \
          build-essential

    - name: Install Buildozer and dependencies
      run: |
        pip install --upgrade pip
        pip install buildozer
        pip install cython==0.29.19
        pip install kivy

    - name: Verify Python headers installation
      run: |
        echo "=== Checking Python headers ==="
        find /usr -name "Python.h" 2>/dev/null | head -5
        python3 -c "import sysconfig; print('Include path:', sysconfig.get_config_var('INCLUDEPY'))"

    - name: Pre-accept Android licenses
      run: |
        mkdir -p ~/.android
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > ~/.android/android-sdk-license
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> ~/.android/android-sdk-license
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> ~/.android/android-sdk-license

    - name: Build APK with Python headers fix
      run: |
        # Устанавливаем переменные окружения для заголовков Python
        export C_INCLUDE_PATH=$(python3 -c "import sysconfig; print(sysconfig.get_config_var('INCLUDEPY'))"):$C_INCLUDE_PATH
        export CPLUS_INCLUDE_PATH=$(python3 -c "import sysconfig; print(sysconfig.get_config_var('INCLUDEPY'))"):$CPLUS_INCLUDE_PATH
        
        echo "Python include path: $(python3 -c "import sysconfig; print(sysconfig.get_config_var('INCLUDEPY'))")"
        
        # Запускаем сборку
        buildozer -v android debug 2>&1 | tee full_build.log
        echo "BUILD_EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_ENV

    - name: Analyze build results
      run: |
        echo "Build exit code: $BUILD_EXIT_CODE"
        
        if [ -f "full_build.log" ]; then
          echo "=== Last 30 lines of log ==="
          tail -30 full_build.log
          
          echo "=== Error analysis ==="
          grep -i "error\|fail\|exception\|Python.h" full_build.log | head -10 || echo "No errors found"
        fi

    - name: Check for APK files
      run: |
        echo "=== Searching for APK files ==="
        find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
        echo "=== bin directory ==="
        ls -la bin/ 2>/dev/null || echo "bin directory not found"

    - name: Upload build log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-log
        path: full_build.log

    - name: Upload APK if exists
      if: success()
      run: |
        mkdir -p artifacts
        APK_FILES=$(find . -name "*.apk" -type f 2>/dev/null)
        
        if [ -n "$APK_FILES" ]; then
          echo "Found APK files: $APK_FILES"
          cp $APK_FILES artifacts/
          ls -la artifacts/
        else
          echo "No APK files found"
          exit 1
        fi

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: artifacts/*.apk

    - name: Create debug info on failure
      if: failure()
      run: |
        mkdir -p artifacts
        echo "Build failed with exit code: $BUILD_EXIT_CODE" > artifacts/debug.txt
        if [ -f "full_build.log" ]; then
          echo "=== Last 20 lines ===" >> artifacts/debug.txt
          tail -20 full_build.log >> artifacts/debug.txt
        fi

    - name: Upload debug info
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-info
        path: artifacts/debug.txt
