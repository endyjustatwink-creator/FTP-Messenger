name: Android Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          zip \
          unzip \
          openjdk-17-jdk \
          python3-pip \
          autoconf \
          automake \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libsqlite3-dev \
          libffi-dev \
          libssl-dev \
          python3-venv \
          python3-dev \
          build-essential \
          wget

    - name: Create and activate virtual environment
      run: |
        python3 -m venv venv
        source venv/bin/activate

    - name: Install Buildozer and dependencies
      run: |
        source venv/bin/activate
        pip install --upgrade pip
        pip install wheel
        pip install setuptools==65.5.0
        pip install cython==0.29.19
        pip install buildozer
        pip install kivy==2.3.0

    - name: Install Android SDK and Build Tools manually
      run: |
        # Создаем директории для Android SDK
        mkdir -p ~/.android
        mkdir -p ~/.buildozer/android/platform
        
        # Принимаем лицензии
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > ~/.android/android-sdk-license
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> ~/.android/android-sdk-license
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> ~/.android/android-sdk-license
        
        # Скачиваем и устанавливаем Android Command Line Tools
        cd ~/.buildozer/android/platform
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
        unzip -q commandlinetools-linux-8512546_latest.zip
        rm commandlinetools-linux-8512546_latest.zip
        
        # Устанавливаем SDK Manager
        cd ~/.buildozer/android/platform
        mkdir -p android-sdk/cmdline-tools
        mv cmdline-tools android-sdk/cmdline-tools/latest
        
        # Устанавливаем необходимые компоненты
        yes | android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=android-sdk "platform-tools" "build-tools;34.0.0" "platforms;android-33" "ndk;23.1.7779620"
        
        # Проверяем установку aidl
        echo "=== Checking aidl ==="
        find ~/.buildozer -name "aidl" -type f 2>/dev/null || echo "aidl not found"
        
        echo "=== Build tools contents ==="
        ls -la ~/.buildozer/android/platform/android-sdk/build-tools/34.0.0/ || echo "Build tools not found"

    - name: Set up environment variables
      run: |
        echo "ANDROID_HOME=~/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=~/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "PATH=~/.buildozer/android/platform/android-sdk/platform-tools:~/.buildozer/android/platform/android-sdk/build-tools/34.0.0:$PATH" >> $GITHUB_ENV

    - name: Verify Android tools
      run: |
        echo "=== Current PATH ==="
        echo $PATH
        
        echo "=== Checking Android tools ==="
        which adb || echo "adb not found"
        which aidl || echo "aidl not found"
        
        echo "=== Android SDK structure ==="
        ls -la ~/.buildozer/android/platform/android-sdk/ || echo "Android SDK not found"
        
        echo "=== Build tools ==="
        ls -la ~/.buildozer/android/platform/android-sdk/build-tools/34.0.0/ | grep aidl || echo "aidl not in build tools"

    - name: Build APK with fixed environment
      run: |
        source venv/bin/activate
        
        # Экспортируем переменные
        export ANDROID_HOME=~/.buildozer/android/platform/android-sdk
        export ANDROID_SDK_ROOT=~/.buildozer/android/platform/android-sdk
        export PATH=~/.buildozer/android/platform/android-sdk/platform-tools:~/.buildozer/android/platform/android-sdk/build-tools/34.0.0:$PATH
        
        echo "=== Final tool check ==="
        which aidl || echo "WARNING: aidl still not found in PATH"
        
        # Принудительно указываем путь к aidl если не найден
        AIDL_PATH=$(find ~/.buildozer -name "aidl" -type f 2>/dev/null | head -1)
        if [ -n "$AIDL_PATH" ]; then
          echo "Found aidl at: $AIDL_PATH"
          ln -sf "$AIDL_PATH" /usr/local/bin/aidl 2>/dev/null || true
        fi
        
        echo "=== Starting build ==="
        timeout 1800 buildozer -v android debug 2>&1 | tee full_build.log

    - name: Analyze build results
      run: |
        echo "=== Build status ==="
        if [ ${PIPESTATUS[0]} -eq 0 ]; then
          echo "Build completed successfully!"
        else
          echo "Build failed or timed out"
        fi
        
        echo "=== Error analysis ==="
        grep -i "error\|fail\|exception\|aidl" full_build.log | head -20 || echo "No obvious errors found"
        
        echo "=== APK search ==="
        find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"

    - name: Upload build log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-log
        path: full_build.log

    - name: Upload APK if exists
      if: always()
      run: |
        mkdir -p artifacts
        APK_FILES=$(find . -name "*.apk" -type f 2>/dev/null)
        
        if [ -n "$APK_FILES" ]; then
          echo "Found APK files: $APK_FILES"
          cp $APK_FILES artifacts/
          ls -la artifacts/
        else
          echo "No APK files found"
          # Создаем подробный отчет о том, что есть в директориях
          echo "=== Directory structure analysis ===" > artifacts/debug.txt
          echo "bin directory:" >> artifacts/debug.txt
          ls -la bin/ 2>/dev/null || echo "bin/ not found" >> artifacts/debug.txt
          echo ".buildozer android apps:" >> artifacts/debug.txt
          find .buildozer -name "*.apk" -type f 2>/dev/null >> artifacts/debug.txt
        fi

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: artifacts/*.apk

    - name: Upload debug info
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-info
        path: artifacts/debug.txt
